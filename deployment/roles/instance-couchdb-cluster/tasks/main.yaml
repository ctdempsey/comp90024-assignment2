# Setup a CouchDB cluster.

# Upload Docker Compose file to the cloud.
- name: Upload Docker Compose file
  become: yes
  template:
    src: docker-compose.yaml.j2
    dest: './docker-compose.yaml'
    mode: 0744
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'


# Upload CouchDB cluster script to the cloud.
- name: Upload CouchDB cluster script
  become: yes
  template:
    src: couchdb-cluster.sh.j2
    dest: '{{ couchdb_dir }}/couchdb-cluster.sh'
    mode: 0744
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'

# Upload CouchDB configurations to the cloud.
- name: Upload CouchDB configs
  become: yes
  template:
    src: couchdb.ini.j2
    dest: '{{ couchdb_config_dir }}/local.ini'
    mode: 0744
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'

# Stop and remove any running Docker containers.
- name: Stop and remove running Docker containers
  become: yes
  command: 'docker-compose down'

# Create `etc/systemd/system/docker.service.d` directory to store daemon proxy setting file.
- name: Create `/etc/systemd/system/docker.service.d/`
  become: yes
  file: 
    path: /etc/systemd/system/docker.service.d/
    state: directory

# Upload `http-proxy.conf` to the cloud.
- name: Upload `http-proxy.conf`
  become: yes
  copy:
    src: ./http-proxy.conf
    dest: /etc/systemd/system/docker.service.d/http-proxy.conf
    force: yes
    mode: 0555
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'

# Create `~/.docker/config.json` directory to store Docker client config file.
- name: Create `~/.docker`
  become: yes
  file: 
    path: ~/.docker
    state: directory

# Upload Docker client config file.
- name: Upload Docker client config
  become: yes
  copy:
    src: ./config.json
    dest: ~/.docker/config.json
    force: yes
    mode: 0555
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'


# Flush changes.
- name: Flush changes
  become: yes
  shell: systemctl daemon-reload

# Restart Docker.
- name: Restart Docker
  become: yes
  shell: systemctl restart docker

# Change docker.sock permissions so we can use docker commands.
- name: docker.sock permission configs
  become: yes
  shell: sudo chmod 666 /var/run/docker.sock

# Pull couchdb3 image.
- name: Pull couchdb image
  become: yes
  shell: docker pull couchdb:3.0.0
  args:
    chdir: "{{ couchdb_dir }}"

# Build new Docker containers for CouchDB services.
- name: Build Docker containers
  become: yes
  command: 'docker-compose up -d'
  args:
    chdir: "{{ couchdb_dir }}"

# Wait for the newly created Docker containers to start working.
- name: Wait for Docker containers
  pause:
    seconds: 10

# Enable CouchDB cluster mode.
- name: Enable CouchDB cluster mode
  when: ansible_default_ipv4.address != configuration_node
  uri:
    url: http://{{configuration_node}}:{{couchdb_port}}/_cluster_setup
    body: 
      action: enable_cluster
      bind_address: 0.0.0.0
      username: "{{couchdb_user}}"
      password: "{{couchdb_password}}"
      port: "{{couchdb_port}}"
      node_count: 4
      remote_node: "{{ansible_default_ipv4.address}}"
      remote_current_user: "{{couchdb_user}}"
      remote_current_password: "{{couchdb_password}}"
    body_format: json
    method: POST
    user: '{{ couchdb_user }}'
    password: '{{ couchdb_password }}'
    force_basic_auth: yes
    status_code: 201, 202, 409
    headers:
      Content-Type: "application/json"

# Join CouchDB configuration node to make a cluster.
- name: Join a CouchDB cluster
  when: ansible_default_ipv4.address != configuration_node
  uri:
    url: http://{{configuration_node}}:{{couchdb_port}}/_cluster_setup
    body: 
      action: add_node
      host: "{{ansible_default_ipv4.address}}" 
      port: "{{couchdb_port}}"
      username: "{{couchdb_user}}"
      password: "{{couchdb_password}}"
    body_format: json
    method: POST
    user: '{{ couchdb_user }}'
    password: '{{ couchdb_password }}'
    force_basic_auth: yes
    status_code: 201, 202, 409
    headers:
      Content-Type: "application/json"